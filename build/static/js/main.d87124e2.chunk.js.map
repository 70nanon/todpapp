{"version":3,"sources":["components/task.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Task","props","draggableId","id","index","provided","ListGroupItem","ref","innerRef","draggableProps","dragHandleProps","className","name","App","useState","characters","updateCharacters","fetchData","a","axios","get","headers","then","res","data","contents","catch","e","undefined","response","title","comment","result","useEffect","Button","onClick","onDragEnd","items","Array","from","splice","source","reorderedItem","destination","droppableId","droppableProps","ListGroup","map","thumb","placeholder","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uSAuBeA,MAnBf,SAAcC,GACZ,OACE,cAAC,IAAD,CAA0BC,YAAaD,EAAME,GAAIC,MAAOH,EAAMG,MAA9D,SACG,SAACC,GAAD,OACC,eAACC,EAAA,EAAD,qCACEC,IAAKF,EAASG,UACVH,EAASI,gBACTJ,EAASK,iBAHf,IAIEC,UAAU,eAJZ,UAME,qBAAKA,UAAU,qBAEf,mBAAGA,UAAU,MAAb,SAAoBV,EAAMW,aAVhBX,EAAME,K,iBCsFXU,MAlFf,WACE,IAGA,EAAuCC,mBAAS,IAAhD,mBAAOC,EAAP,KAAmBC,EAAnB,KAEMC,EAAS,uCAAG,4BAAAC,EAAA,sEACKC,IAAMC,IANjB,2CAM0B,CAClCC,QAAS,CACP,YAPS,0CAUZC,MAAK,SAAAC,GAAG,OAAKA,EAAIC,KAAKC,YACtBC,OAAM,SAACC,GACN,QAAmBC,IAAfD,EAAEE,SAEJ,MAAO,CAAC,CAAE1B,GAAI,KAAM2B,MAAO,KAAMC,QAAS,UAV9B,OACVC,EADU,OAchBhB,EAAiBgB,GAdD,2CAAH,qDA8Cf,OA7BAC,qBAAU,WACRhB,MACC,IA4BD,qBAAKN,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACE,4EACA,cAACuB,EAAA,EAAD,CAAQC,QAjBd,WACElB,KAgBI,qBACA,cAAC,IAAD,CAAiBmB,UA9BvB,SAAyBJ,GAAc,IAAD,EAC9BK,EAAQC,MAAMC,KAAKxB,GACzB,EAAwBsB,EAAMG,OAAOR,EAAOS,OAAOrC,MAAO,GAAnDsC,EAAP,oBACAL,EAAMG,OAAN,UAAaR,EAAOW,mBAApB,aAAa,EAAoBvC,MAAO,EAAGsC,GAE3C1B,EAAiBqB,IAyBb,SACE,cAAC,IAAD,CAAWO,YAAY,aAAvB,SACG,SAACvC,GAAD,OACC,6CACEM,UAAU,cACNN,EAASwC,gBAFf,IAGEtC,IAAKF,EAASG,SAHhB,SAKE,eAACsC,EAAA,EAAD,kBACG/B,QADH,IACGA,OADH,EACGA,EAAYgC,KAAI,WAAyB3C,GAAW,IAAjCD,EAAgC,EAAhCA,GAAI2B,EAA4B,EAA5BA,MAAOC,EAAqB,EAArBA,QAC7B,OACE,cAAC,EAAD,CAAM5B,GAAIA,EAAIS,KAAMkB,EAAOkB,MAAOjB,EAAS3B,MAAOA,OAGrDC,EAAS4C,6BCnEbC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqB9B,MAAK,YAAkD,IAA/C+B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.d87124e2.chunk.js","sourcesContent":["import { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { ListGroupItem } from 'react-bootstrap';\n\nfunction Task(props: any) {\n  return (\n    <Draggable key={props.id} draggableId={props.id} index={props.index}>\n      {(provided) => (\n        <ListGroupItem\n          ref={provided.innerRef}\n          {...provided.draggableProps}\n          {...provided.dragHandleProps}\n          className=\"my-2 rounded\"\n        >\n          <div className=\"characters-thumb\">\n          </div>\n          <p className=\"m-0\">{props.name}</p>\n        </ListGroupItem>\n      )}\n    </Draggable>\n  )\n}\n\nexport default Task;\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport { CHARACTERS } from \"./caractersData\";\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Button, ListGroup } from 'react-bootstrap';\nimport Task from \"./components/task\";\nimport axios from 'axios';\n\n\nfunction App() {\n  const url = \"https://todoapp.microcms.io/api/v1/tasks\";\n  const apiKey = \"f7c56759-963c-4bfe-971d-bccf2a334220\";\n  const apiWhiteKey = \"77d88407-5a2c-42f0-bcff-9e40f60a1ba6\";\n  const [characters, updateCharacters] = useState([]);\n\n  const fetchData = async() => {\n    const result = await axios.get(url, {\n      headers: {\n        \"X-API-KEY\": apiKey\n      }\n    })\n    .then(res => (res.data.contents))\n    .catch((e) => {\n      if (e.response !== undefined) {\n        // e.response.dataはanyになる\n        return [{ id: null, title: null, comment: null}]\n      }\n    });\n    \n    updateCharacters(result);\n  }\n  \n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  function handleOnDragEnd(result: any) {\n    const items = Array.from(characters);\n    const [reorderedItem] = items.splice(result.source.index, 1);\n    items.splice(result.destination?.index, 0, reorderedItem);\n\n    updateCharacters(items);\n\n    // ここにaxiosで順番の更新をAPIに送信する処理を書く\n    // api key f7c56759-963c-4bfe-971d-bccf2a334220\n    // api post key 77d88407-5a2c-42f0-bcff-9e40f60a1ba6\n  }\n  \n  function fetchDataOnClick() {\n    fetchData();\n    // ここにaxiosでタスクの追加をAPIに送信する処理を書く\n  }\n  // function handleDeleteTask(result: any) {\n  //   const items = Array.from(characters);\n  //   const [reorderedItem] = items.splice(result.source.index, 1);\n  //   items.splice(result.destination.index, 0, reorderedItem);\n\n  //   updateCharacters(items);\n\n  //   // ここにaxiosでタスクの削除をAPIに送信する処理を書く\n  // }\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>めそこスタンプ</h1>\n        <Button onClick={fetchDataOnClick}>-------</Button>\n        <DragDropContext onDragEnd={handleOnDragEnd}>\n          <Droppable droppableId=\"characters\">\n            {(provided) => (\n              <div\n                className=\"characters\"\n                {...provided.droppableProps}\n                ref={provided.innerRef}\n              >\n                <ListGroup>\n                  {characters?.map(({ id, title, comment }, index) => {\n                    return (\n                      <Task id={id} name={title} thumb={comment} index={index} />\n                    );\n                  })}\n                  {provided.placeholder}\n                </ListGroup>\n              </div>\n            )}\n          </Droppable>\n        </DragDropContext>\n      </header>\n    </div>\n  );\n}\n\nexport default App;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}